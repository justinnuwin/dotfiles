"         _                    
"  __   _(_)_ __ ___  _ __ ___ 
"  \ \ / / | '_ ` _ \| '__/ __|
"   \ V /| | | | | | | | | (__ 
"  (_)_/ |_|_| |_| |_|_|  \___|
"

" Leader key
let mapleader = ","

let dotfilesDirectory = expand('~/.dotfiles')
if isdirectory(dotfilesDirectory)
    execute 'source' dotfilesDirectory . '/vim/bazel_utils.vim'
    nmap <leader>[ :call OpenBazelBuildDef()<CR>
    nmap <leader><C-W>[ :call OpenSplitBazelBuildDef()<CR>
    execute 'source' dotfilesDirectory . '/vim/cpp_utils.vim'
    nmap <leader>] :call OpenCppHeaderSourceFile()<CR>
    nmap <leader><C-W>] :call OpenSplitCppHeaderSourceFile()<CR>
endif

let pluginDirectory = expand('~/.vim/plugins/')
if isdirectory(pluginDirectory)
    " Vim Plug
    call plug#begin(pluginDirectory)

    " Code Completion
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    " set cmdheight=2
    set updatetime=300
    set shortmess+=c
    " Remember to set suggest.noselect": true in coc config
    inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
    function! CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Syntax Checking
    " Plug 'vim-syntastic/syntastic'
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    map <C-S> :SyntasticToggleMode<CR>

    " File Tree
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'Xuyuanp/nerdtree-git-plugin'
    map <leader>o :NERDTreeToggle<CR>
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    " Git Bindings.
    " Use GBrowse! to display the url without opening a browse (i.e. when SSHed)
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-rhubarb'   " Enables Git-Browse with GitHub
    let g:github_enterprise_urls = ['https://git.zooxlabs.com']

    " Better Latex Syntax Highlighting
    Plug 'lervag/vimtex'
    let g:tex_flavor='latex'
    " let g:vimtex_view_method='skim'
    let g:vimtex_quickfix_mode=0
    autocmd Filetype tex setlocal conceallevel=1
    let g:tex_conceal='abdmg'

    " Snip-style Macros
    " Plug 'sirver/ultisnips'
    let g:UltiSnipsExpandTrigger = '<c-tab>'
    let g:UltiSnipsJumpForwardTrigger = '<c-tab>'
    let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

    " Movement with 2 characters
    Plug 'justinmk/vim-sneak'
    let g:sneak#s_next = 1

    " Highlighting for horizontal f/F movements
    Plug 'unblevable/quick-scope' 
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

    " Vim Bar Theme
    Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
    let g:airline_powerline_fonts = 1

    " Display Marks
    Plug 'kshenoy/vim-signature'

    " Less janky exiting insert mode (rather than Ctrl-C or hand-rolled jk)
    Plug 'zhou13/vim-easyescape'
    let g:easyescape_chars = { "j": 1, "k": 1 }
    let g:easyescape_timeout = 200
    cnoremap jk <ESC>

    " Indentation Highlighting
    Plug 'nathanaelkane/vim-indent-guides'
    " default toggle is <leader>ig
    let g:indent_guides_enable_on_vim_startup = 1
    " let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=235
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=236

    " Show Git line changes
    Plug 'airblade/vim-gitgutter'

    " Easily comment out code
    Plug 'tpope/vim-commentary'

    " View and search man pages
    Plug 'vim-utils/vim-man'

    " Hilight bad unicode characters
    Plug 'vim-utils/vim-troll-stopper'

    " Display ctags to help navigate large files
    Plug 'preservim/tagbar'
    nnoremap <leader>f :TagbarToggle<CR>
    
    " Fuzzy search file finder
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    let g:fzf_preview_window = ['right,50%,<70(up,40%)']
    nnoremap <C-/> :Files ../../../<CR>
    nnoremap <leader>/ :GFiles <CR>
    " Rg requires ripgrep to be installed
    nnoremap <leader>g :Rg <CR>
    nnoremap <leader>b :execute 'Files ' . GetBazelBinPath() <CR>
    nnoremap <leader>B :execute 'Files ' . GetBazelOutPath() <CR>
    nnoremap <leader>l :Buffers <CR>
    nnoremap <BS> <C-H>

    call plug#end()
else
    " Bind jk to escape because it's too damn far away!
    imap jk <Esc>
endif

" Ask to save rather than error on unsaved changes
set confirm

" Helps force plugins to load correctly when it is turned back on below
filetype off

" Turn on syntax highlighting
syntax on

" For plugins to load correctly
filetype plugin indent on

" Spelling
set spell spelllang=en_us
setlocal spell spelllang=en_us
set nospell
map <leader>s :setlocal spell! spell?<CR>

" Security
set modeline
set modelines=2

" Show line numbers
set number

" Show file stats
set ruler

" Encoding
set encoding=utf-8

" Whitespace
set wrap
set linebreak
set nolist
set textwidth=120
set wrapmargin=0
set formatoptions=tcqrn1
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set noshiftround

" Folding
" Use zR to make all folds go away
set foldmethod=indent
set foldlevel=3
set foldclose=all

" Cursor motion
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim
set mouse=a 

" Move up/down display lines for wrapped text
nnoremap j gj
nnoremap k gk

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2

" Last line
set showmode
set showcmd

" Hilight Current line
set cursorline

" Visual Autocomplete for command menu
set wildmenu

" Don't beep or flash
set visualbell
set t_vb=

" Searching
nnoremap / /\v
vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
map <leader><space> :noh<CR>

" Formatting
map <leader>q gqip

" Visualize tabs and newlines
" Old   tab:▸\ ,eol:¬
set showbreak=↪
set listchars=tab:→\ ,eol:↲,space:·,nbsp:␣,trail:·,extends:›,precedes:‹
map <leader>L :set list!<CR> " Toggle tabs and EOL

" Color scheme (terminal)
set t_Co=256
set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans=1

" Don't delete leading whitespace on empty line on <CR> or exiting Insert mode
" TODO: This shouldn't be ignored by easy escape, probably do a PR for Indent
" Guides to not be soley based off of existing whitespace characters
inoremap <CR> <CR>x<BS>
nnoremap o ox<BS>
nnoremap O Ox<BS>

" Set conceal level to 2 for JSON since there are quote EVERYWHERE
autocmd Filetype json setlocal conceallevel=2

" Color characters at column 81
highlight ColorColumn ctermbg=gray
call matchadd('ColorColumn', '\%81v', 100)"

" Search for ctags in the current file, working directory, and up
set tags=./tags;,tags;

" Remap search current cursor to no move the cursor initially
nnoremap * *N
nnoremap # #n

" Set syntax highlighting for .inc files to C++
autocmd BufEnter *.inc :setlocal filetype=cpp

" Unmap C-W C-C or C-W q which closes a pane if we try to not switch panes after invoking C-W
nnoremap <C-W><C-C> <ESC>
nnoremap <C-W>q <ESC>

" Higher-contrast colors for diffs
highlight DiffAdd    cterm=bold ctermfg=lightyellow ctermbg=darkgreen gui=none guifg=fg guibg=bg
highlight DiffDelete cterm=bold ctermfg=lightyellow ctermbg=darkred gui=none guifg=fg guibg=bg
highlight DiffChange cterm=bold ctermfg=lightyellow ctermbg=darkblue gui=none guifg=fg guibg=bg

" Shortcut to enter paste mode
nnoremap <leader>p :set paste!<CR>
